"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    The version of the OpenAPI document: alpha (2.0)
    Contact: nikita.manovich@intel.com
    Generated by: https://openapi-generator.tech
"""


import typing
from typing import overload
import urllib3

import re  # noqa: F401
import sys  # noqa: F401

from cvat_api_client.api_client import ApiClient, Endpoint as _Endpoint
from cvat_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cvat_api_client.model.login_request import LoginRequest
from cvat_api_client.model.password_change_request import PasswordChangeRequest
from cvat_api_client.model.password_reset_confirm_request import PasswordResetConfirmRequest
from cvat_api_client.model.password_reset_serializer_ex_request import PasswordResetSerializerExRequest
from cvat_api_client.model.rest_auth_detail import RestAuthDetail
from cvat_api_client.model.restricted_register import RestrictedRegister
from cvat_api_client.model.restricted_register_request import RestrictedRegisterRequest
from cvat_api_client.model.signing_request import SigningRequest
from cvat_api_client.model.token import Token


class AuthApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.auth_login_create_endpoint = _Endpoint(
            settings={
                'response_type': (Token,),
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/auth/login',
                'operation_id': 'auth_login_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'login_request',
                ],
                'required': [
                    'login_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'login_request':
                        (LoginRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'login_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.cvat+json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data',
                    'application/offset+octet-stream'
                ]
            },
            api_client=api_client
        )
        self.auth_logout_create_endpoint = _Endpoint(
            settings={
                'response_type': (RestAuthDetail,),
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/auth/logout',
                'operation_id': 'auth_logout_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.cvat+json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.auth_password_change_create_endpoint = _Endpoint(
            settings={
                'response_type': (RestAuthDetail,),
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/auth/password/change',
                'operation_id': 'auth_password_change_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'password_change_request',
                ],
                'required': [
                    'password_change_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'password_change_request':
                        (PasswordChangeRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'password_change_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.cvat+json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data',
                    'application/offset+octet-stream'
                ]
            },
            api_client=api_client
        )
        self.auth_password_reset_confirm_create_endpoint = _Endpoint(
            settings={
                'response_type': (RestAuthDetail,),
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/auth/password/reset/confirm',
                'operation_id': 'auth_password_reset_confirm_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'password_reset_confirm_request',
                ],
                'required': [
                    'password_reset_confirm_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'password_reset_confirm_request':
                        (PasswordResetConfirmRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'password_reset_confirm_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.cvat+json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data',
                    'application/offset+octet-stream'
                ]
            },
            api_client=api_client
        )
        self.auth_password_reset_create_endpoint = _Endpoint(
            settings={
                'response_type': (RestAuthDetail,),
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/auth/password/reset',
                'operation_id': 'auth_password_reset_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'password_reset_serializer_ex_request',
                ],
                'required': [
                    'password_reset_serializer_ex_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'password_reset_serializer_ex_request':
                        (PasswordResetSerializerExRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'password_reset_serializer_ex_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.cvat+json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data',
                    'application/offset+octet-stream'
                ]
            },
            api_client=api_client
        )
        self.auth_register_create_endpoint = _Endpoint(
            settings={
                'response_type': (RestrictedRegister,),
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/auth/register',
                'operation_id': 'auth_register_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'restricted_register_request',
                ],
                'required': [
                    'restricted_register_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'restricted_register_request':
                        (RestrictedRegisterRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'restricted_register_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.cvat+json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data',
                    'application/offset+octet-stream'
                ]
            },
            api_client=api_client
        )
        self.auth_signing_create_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/auth/signing',
                'operation_id': 'auth_signing_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'signing_request',
                ],
                'required': [
                    'signing_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'signing_request':
                        (SigningRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'signing_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.cvat+json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data',
                    'application/offset+octet-stream'
                ]
            },
            api_client=api_client
        )

    @overload
    def auth_login_create(
        self,
        login_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> object:
        ...

    @overload
    def auth_login_create(
        self,
        login_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_login_create(
        self,
        login_request,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_login_create(
        self,
        login_request,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_login_create(
        self,
        login_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_login_create(
        self,
        login_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def auth_login_create(
        self,
        login_request,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[object, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            object
    ]:
        """auth_login_create  # noqa: E501

        Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object's key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_login_create(login_request, async_req=True)
        >>> result = thread.get()

        Args:
            login_request (LoginRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Token
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['login_request'] = \
            login_request
        return self.auth_login_create_endpoint.call_with_http_info(**kwargs)

    def auth_login_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as auth_login_create(), but returns the response unprocessed.
        Equivalent to calling auth_login_create with
        _preload_content = False and _check_status=False

        auth_login_create  # noqa: E501

        Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object's key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_login_create(login_request, async_req=True)
        >>> result = thread.get()

        Args:
            login_request (LoginRequest):

        Keyword Args:
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Token
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.auth_login_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def auth_logout_create(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> object:
        ...

    @overload
    def auth_logout_create(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_logout_create(
        self,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_logout_create(
        self,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_logout_create(
        self,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_logout_create(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def auth_logout_create(
        self,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[object, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            object
    ]:
        """auth_logout_create  # noqa: E501

        Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_logout_create(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.auth_logout_create_endpoint.call_with_http_info(**kwargs)

    def auth_logout_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as auth_logout_create(), but returns the response unprocessed.
        Equivalent to calling auth_logout_create with
        _preload_content = False and _check_status=False

        auth_logout_create  # noqa: E501

        Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_logout_create(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.auth_logout_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def auth_password_change_create(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> object:
        ...

    @overload
    def auth_password_change_create(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_password_change_create(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_password_change_create(
        self,
        password_change_request,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_password_change_create(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_password_change_create(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def auth_password_change_create(
        self,
        password_change_request,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[object, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            object
    ]:
        """auth_password_change_create  # noqa: E501

        Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_password_change_create(password_change_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_change_request (PasswordChangeRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['password_change_request'] = \
            password_change_request
        return self.auth_password_change_create_endpoint.call_with_http_info(**kwargs)

    def auth_password_change_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as auth_password_change_create(), but returns the response unprocessed.
        Equivalent to calling auth_password_change_create with
        _preload_content = False and _check_status=False

        auth_password_change_create  # noqa: E501

        Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_password_change_create(password_change_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_change_request (PasswordChangeRequest):

        Keyword Args:
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.auth_password_change_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def auth_password_reset_confirm_create(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> object:
        ...

    @overload
    def auth_password_reset_confirm_create(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_password_reset_confirm_create(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_password_reset_confirm_create(
        self,
        password_reset_confirm_request,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_password_reset_confirm_create(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_password_reset_confirm_create(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def auth_password_reset_confirm_create(
        self,
        password_reset_confirm_request,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[object, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            object
    ]:
        """auth_password_reset_confirm_create  # noqa: E501

        Password reset e-mail link is confirmed, therefore this resets the user's password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_password_reset_confirm_create(password_reset_confirm_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_reset_confirm_request (PasswordResetConfirmRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['password_reset_confirm_request'] = \
            password_reset_confirm_request
        return self.auth_password_reset_confirm_create_endpoint.call_with_http_info(**kwargs)

    def auth_password_reset_confirm_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as auth_password_reset_confirm_create(), but returns the response unprocessed.
        Equivalent to calling auth_password_reset_confirm_create with
        _preload_content = False and _check_status=False

        auth_password_reset_confirm_create  # noqa: E501

        Password reset e-mail link is confirmed, therefore this resets the user's password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_password_reset_confirm_create(password_reset_confirm_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_reset_confirm_request (PasswordResetConfirmRequest):

        Keyword Args:
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.auth_password_reset_confirm_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def auth_password_reset_create(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> object:
        ...

    @overload
    def auth_password_reset_create(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_password_reset_create(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_password_reset_create(
        self,
        password_reset_serializer_ex_request,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_password_reset_create(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_password_reset_create(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def auth_password_reset_create(
        self,
        password_reset_serializer_ex_request,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[object, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            object
    ]:
        """auth_password_reset_create  # noqa: E501

        Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_password_reset_create(password_reset_serializer_ex_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_reset_serializer_ex_request (PasswordResetSerializerExRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['password_reset_serializer_ex_request'] = \
            password_reset_serializer_ex_request
        return self.auth_password_reset_create_endpoint.call_with_http_info(**kwargs)

    def auth_password_reset_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as auth_password_reset_create(), but returns the response unprocessed.
        Equivalent to calling auth_password_reset_create with
        _preload_content = False and _check_status=False

        auth_password_reset_create  # noqa: E501

        Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_password_reset_create(password_reset_serializer_ex_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_reset_serializer_ex_request (PasswordResetSerializerExRequest):

        Keyword Args:
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.auth_password_reset_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def auth_register_create(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> object:
        ...

    @overload
    def auth_register_create(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_register_create(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_register_create(
        self,
        restricted_register_request,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_register_create(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_register_create(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def auth_register_create(
        self,
        restricted_register_request,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[object, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            object
    ]:
        """auth_register_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_register_create(restricted_register_request, async_req=True)
        >>> result = thread.get()

        Args:
            restricted_register_request (RestrictedRegisterRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestrictedRegister
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['restricted_register_request'] = \
            restricted_register_request
        return self.auth_register_create_endpoint.call_with_http_info(**kwargs)

    def auth_register_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as auth_register_create(), but returns the response unprocessed.
        Equivalent to calling auth_register_create with
        _preload_content = False and _check_status=False

        auth_register_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_register_create(restricted_register_request, async_req=True)
        >>> result = thread.get()

        Args:
            restricted_register_request (RestrictedRegisterRequest):

        Keyword Args:
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestrictedRegister
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.auth_register_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def auth_signing_create(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> object:
        ...

    @overload
    def auth_signing_create(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_signing_create(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def auth_signing_create(
        self,
        signing_request,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_signing_create(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def auth_signing_create(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def auth_signing_create(
        self,
        signing_request,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[object, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            object
    ]:
        """This method signs URL for access to the server  # noqa: E501

        Signed URL contains a token which authenticates a user on the server.Signed URL is valid during 30 seconds since signing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_signing_create(signing_request, async_req=True)
        >>> result = thread.get()

        Args:
            signing_request (SigningRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['signing_request'] = \
            signing_request
        return self.auth_signing_create_endpoint.call_with_http_info(**kwargs)

    def auth_signing_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as auth_signing_create(), but returns the response unprocessed.
        Equivalent to calling auth_signing_create with
        _preload_content = False and _check_status=False

        This method signs URL for access to the server  # noqa: E501

        Signed URL contains a token which authenticates a user on the server.Signed URL is valid during 30 seconds since signing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_signing_create(signing_request, async_req=True)
        >>> result = thread.get()

        Args:
            signing_request (SigningRequest):

        Keyword Args:
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.auth_signing_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

