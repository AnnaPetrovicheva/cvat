"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    The version of the OpenAPI document: alpha (2.0)
    Contact: nikita.manovich@intel.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations

import re  # noqa: F401
import sys  # noqa: F401
import typing
from typing import TYPE_CHECKING, overload

import urllib3

from cvat_api_client.api_client import ApiClient
from cvat_api_client.api_client import Endpoint as _Endpoint
from cvat_api_client.model.login_request import LoginRequest
from cvat_api_client.model.password_change_request import PasswordChangeRequest
from cvat_api_client.model.password_reset_confirm_request import PasswordResetConfirmRequest
from cvat_api_client.model.password_reset_serializer_ex_request import (
    PasswordResetSerializerExRequest,
)
from cvat_api_client.model.rest_auth_detail import RestAuthDetail
from cvat_api_client.model.restricted_register import RestrictedRegister
from cvat_api_client.model.restricted_register_request import RestrictedRegisterRequest
from cvat_api_client.model.signing_request import SigningRequest
from cvat_api_client.model.token import Token
from cvat_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)

if TYPE_CHECKING:
    # Enable introspection. Can't work normally due to cyclic imports
    from cvat_api_client.apis import *
    from cvat_api_client.models import *


class AuthApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_login_endpoint = _Endpoint(
            settings={
                "response_type": (Token,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/auth/login",
                "operation_id": "create_login",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "login_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "login_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "login_request": (LoginRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "login_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.create_logout_endpoint = _Endpoint(
            settings={
                "response_type": (RestAuthDetail,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/auth/logout",
                "operation_id": "create_logout",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.create_password_change_endpoint = _Endpoint(
            settings={
                "response_type": (RestAuthDetail,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/auth/password/change",
                "operation_id": "create_password_change",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "password_change_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "password_change_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "password_change_request": (PasswordChangeRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "password_change_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.create_password_reset_endpoint = _Endpoint(
            settings={
                "response_type": (RestAuthDetail,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/auth/password/reset",
                "operation_id": "create_password_reset",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "password_reset_serializer_ex_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "password_reset_serializer_ex_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "password_reset_serializer_ex_request": (PasswordResetSerializerExRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "password_reset_serializer_ex_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.create_password_reset_confirm_endpoint = _Endpoint(
            settings={
                "response_type": (RestAuthDetail,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/auth/password/reset/confirm",
                "operation_id": "create_password_reset_confirm",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "password_reset_confirm_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "password_reset_confirm_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "password_reset_confirm_request": (PasswordResetConfirmRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "password_reset_confirm_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.create_register_endpoint = _Endpoint(
            settings={
                "response_type": (RestrictedRegister,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/auth/register",
                "operation_id": "create_register",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "restricted_register_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "restricted_register_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "restricted_register_request": (RestrictedRegisterRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "restricted_register_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.create_signing_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/auth/signing",
                "operation_id": "create_signing",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "signing_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "signing_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "signing_request": (SigningRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "signing_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )

    @overload
    def create_login(
        self,
        login_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> Token:
        ...

    @overload
    def create_login(
        self,
        login_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[Token, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_login(
        self, login_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[Token, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_login(
        self, login_request, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_login(
        self,
        login_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_login(
        self,
        login_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_login(
        self, login_request, **kwargs
    ) -> typing.Union[typing.Tuple[Token, int, typing.Dict[str, str]], urllib3.HTTPResponse, Token]:
        """create_login  # noqa: E501

        Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object's key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_login(login_request, async_req=True)
        >>> result = thread.get()

        Args:
            login_request (LoginRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Token
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["login_request"] = login_request
        return self.create_login_endpoint.call_with_http_info(**kwargs)

    def create_login_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_login(), but returns the response unprocessed.
        Equivalent to calling create_login with
        _preload_content = False and _check_status=False

        create_login  # noqa: E501

        Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object's key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_login(login_request, async_req=True)
        >>> result = thread.get()

        Args:
            login_request (LoginRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Token
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_login(*args, **kwargs, _preload_content=False, _check_status=False)

    @overload
    def create_logout(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> RestAuthDetail:
        ...

    @overload
    def create_logout(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_logout(
        self, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_logout(
        self, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_logout(
        self,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_logout(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_logout(
        self, **kwargs
    ) -> typing.Union[
        typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        RestAuthDetail,
    ]:
        """create_logout  # noqa: E501

        Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_logout(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.create_logout_endpoint.call_with_http_info(**kwargs)

    def create_logout_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_logout(), but returns the response unprocessed.
        Equivalent to calling create_logout with
        _preload_content = False and _check_status=False

        create_logout  # noqa: E501

        Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_logout(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_logout(*args, **kwargs, _preload_content=False, _check_status=False)

    @overload
    def create_password_change(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> RestAuthDetail:
        ...

    @overload
    def create_password_change(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_password_change(
        self, password_change_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_password_change(
        self, password_change_request, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_password_change(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_password_change(
        self,
        password_change_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_password_change(
        self, password_change_request, **kwargs
    ) -> typing.Union[
        typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        RestAuthDetail,
    ]:
        """create_password_change  # noqa: E501

        Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_password_change(password_change_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_change_request (PasswordChangeRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["password_change_request"] = password_change_request
        return self.create_password_change_endpoint.call_with_http_info(**kwargs)

    def create_password_change_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_password_change(), but returns the response unprocessed.
        Equivalent to calling create_password_change with
        _preload_content = False and _check_status=False

        create_password_change  # noqa: E501

        Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_password_change(password_change_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_change_request (PasswordChangeRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_password_change(
            *args, **kwargs, _preload_content=False, _check_status=False
        )

    @overload
    def create_password_reset(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> RestAuthDetail:
        ...

    @overload
    def create_password_reset(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_password_reset(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_password_reset(
        self,
        password_reset_serializer_ex_request,
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_password_reset(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_password_reset(
        self,
        password_reset_serializer_ex_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_password_reset(
        self, password_reset_serializer_ex_request, **kwargs
    ) -> typing.Union[
        typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        RestAuthDetail,
    ]:
        """create_password_reset  # noqa: E501

        Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_password_reset(password_reset_serializer_ex_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_reset_serializer_ex_request (PasswordResetSerializerExRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["password_reset_serializer_ex_request"] = password_reset_serializer_ex_request
        return self.create_password_reset_endpoint.call_with_http_info(**kwargs)

    def create_password_reset_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_password_reset(), but returns the response unprocessed.
        Equivalent to calling create_password_reset with
        _preload_content = False and _check_status=False

        create_password_reset  # noqa: E501

        Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_password_reset(password_reset_serializer_ex_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_reset_serializer_ex_request (PasswordResetSerializerExRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_password_reset(
            *args, **kwargs, _preload_content=False, _check_status=False
        )

    @overload
    def create_password_reset_confirm(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> RestAuthDetail:
        ...

    @overload
    def create_password_reset_confirm(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_password_reset_confirm(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_password_reset_confirm(
        self, password_reset_confirm_request, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_password_reset_confirm(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_password_reset_confirm(
        self,
        password_reset_confirm_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_password_reset_confirm(
        self, password_reset_confirm_request, **kwargs
    ) -> typing.Union[
        typing.Tuple[RestAuthDetail, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        RestAuthDetail,
    ]:
        """create_password_reset_confirm  # noqa: E501

        Password reset e-mail link is confirmed, therefore this resets the user's password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_password_reset_confirm(password_reset_confirm_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_reset_confirm_request (PasswordResetConfirmRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["password_reset_confirm_request"] = password_reset_confirm_request
        return self.create_password_reset_confirm_endpoint.call_with_http_info(**kwargs)

    def create_password_reset_confirm_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_password_reset_confirm(), but returns the response unprocessed.
        Equivalent to calling create_password_reset_confirm with
        _preload_content = False and _check_status=False

        create_password_reset_confirm  # noqa: E501

        Password reset e-mail link is confirmed, therefore this resets the user's password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_password_reset_confirm(password_reset_confirm_request, async_req=True)
        >>> result = thread.get()

        Args:
            password_reset_confirm_request (PasswordResetConfirmRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestAuthDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_password_reset_confirm(
            *args, **kwargs, _preload_content=False, _check_status=False
        )

    @overload
    def create_register(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> RestrictedRegister:
        ...

    @overload
    def create_register(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[RestrictedRegister, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_register(
        self, restricted_register_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[RestrictedRegister, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_register(
        self, restricted_register_request, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_register(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_register(
        self,
        restricted_register_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_register(
        self, restricted_register_request, **kwargs
    ) -> typing.Union[
        typing.Tuple[RestrictedRegister, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        RestrictedRegister,
    ]:
        """create_register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_register(restricted_register_request, async_req=True)
        >>> result = thread.get()

        Args:
            restricted_register_request (RestrictedRegisterRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestrictedRegister
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["restricted_register_request"] = restricted_register_request
        return self.create_register_endpoint.call_with_http_info(**kwargs)

    def create_register_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_register(), but returns the response unprocessed.
        Equivalent to calling create_register with
        _preload_content = False and _check_status=False

        create_register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_register(restricted_register_request, async_req=True)
        >>> result = thread.get()

        Args:
            restricted_register_request (RestrictedRegisterRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RestrictedRegister
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_register(*args, **kwargs, _preload_content=False, _check_status=False)

    @overload
    def create_signing(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> str:
        ...

    @overload
    def create_signing(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[str, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_signing(
        self, signing_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[str, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_signing(
        self, signing_request, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_signing(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_signing(
        self,
        signing_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_signing(
        self, signing_request, **kwargs
    ) -> typing.Union[typing.Tuple[str, int, typing.Dict[str, str]], urllib3.HTTPResponse, str]:
        """This method signs URL for access to the server  # noqa: E501

        Signed URL contains a token which authenticates a user on the server.Signed URL is valid during 30 seconds since signing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_signing(signing_request, async_req=True)
        >>> result = thread.get()

        Args:
            signing_request (SigningRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["signing_request"] = signing_request
        return self.create_signing_endpoint.call_with_http_info(**kwargs)

    def create_signing_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_signing(), but returns the response unprocessed.
        Equivalent to calling create_signing with
        _preload_content = False and _check_status=False

        This method signs URL for access to the server  # noqa: E501

        Signed URL contains a token which authenticates a user on the server.Signed URL is valid during 30 seconds since signing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_signing(signing_request, async_req=True)
        >>> result = thread.get()

        Args:
            signing_request (SigningRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_signing(*args, **kwargs, _preload_content=False, _check_status=False)
