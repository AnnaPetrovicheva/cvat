"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    The version of the OpenAPI document: alpha (2.0)
    Contact: nikita.manovich@intel.com
    Generated by: https://openapi-generator.tech
"""


import typing
from typing import overload
import urllib3

import re  # noqa: F401
import sys  # noqa: F401

from cvat_api_client.api_client import ApiClient, Endpoint as _Endpoint
from cvat_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class LambdaApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.lambda_functions_create_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/lambda/functions/{func_id}',
                'operation_id': 'lambda_functions_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'func_id',
                    'x_organization',
                    'org',
                    'org_id',
                ],
                'required': [
                    'func_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'func_id',
                ]
            },
            root_map={
                'validations': {
                    ('func_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9_.-]+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'func_id':
                        (str,),
                    'x_organization':
                        (str,),
                    'org':
                        (str,),
                    'org_id':
                        (int,),
                },
                'attribute_map': {
                    'func_id': 'func_id',
                    'x_organization': 'X-Organization',
                    'org': 'org',
                    'org_id': 'org_id',
                },
                'location_map': {
                    'func_id': 'path',
                    'x_organization': 'header',
                    'org': 'query',
                    'org_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.lambda_functions_list_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/lambda/functions',
                'operation_id': 'lambda_functions_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_organization',
                    'org',
                    'org_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_organization':
                        (str,),
                    'org':
                        (str,),
                    'org_id':
                        (int,),
                },
                'attribute_map': {
                    'x_organization': 'X-Organization',
                    'org': 'org',
                    'org_id': 'org_id',
                },
                'location_map': {
                    'x_organization': 'header',
                    'org': 'query',
                    'org_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.lambda_functions_retrieve_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/lambda/functions/{func_id}',
                'operation_id': 'lambda_functions_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'func_id',
                    'x_organization',
                    'org',
                    'org_id',
                ],
                'required': [
                    'func_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'func_id',
                ]
            },
            root_map={
                'validations': {
                    ('func_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9_.-]+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'func_id':
                        (str,),
                    'x_organization':
                        (str,),
                    'org':
                        (str,),
                    'org_id':
                        (int,),
                },
                'attribute_map': {
                    'func_id': 'func_id',
                    'x_organization': 'X-Organization',
                    'org': 'org',
                    'org_id': 'org_id',
                },
                'location_map': {
                    'func_id': 'path',
                    'x_organization': 'header',
                    'org': 'query',
                    'org_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.cvat+json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.lambda_requests_create_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/lambda/requests',
                'operation_id': 'lambda_requests_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_organization',
                    'org',
                    'org_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_organization':
                        (str,),
                    'org':
                        (str,),
                    'org_id':
                        (int,),
                },
                'attribute_map': {
                    'x_organization': 'X-Organization',
                    'org': 'org',
                    'org_id': 'org_id',
                },
                'location_map': {
                    'x_organization': 'header',
                    'org': 'query',
                    'org_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.lambda_requests_list_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/lambda/requests',
                'operation_id': 'lambda_requests_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_organization',
                    'org',
                    'org_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_organization':
                        (str,),
                    'org':
                        (str,),
                    'org_id':
                        (int,),
                },
                'attribute_map': {
                    'x_organization': 'X-Organization',
                    'org': 'org',
                    'org_id': 'org_id',
                },
                'location_map': {
                    'x_organization': 'header',
                    'org': 'query',
                    'org_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.lambda_requests_retrieve_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'SignatureAuthentication',
                    'basicAuth',
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/lambda/requests/{id}',
                'operation_id': 'lambda_requests_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'x_organization',
                    'org',
                    'org_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'x_organization':
                        (str,),
                    'org':
                        (str,),
                    'org_id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'x_organization': 'X-Organization',
                    'org': 'org',
                    'org_id': 'org_id',
                },
                'location_map': {
                    'id': 'path',
                    'x_organization': 'header',
                    'org': 'query',
                    'org_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )

    @overload
    def lambda_functions_create(
        self,
        func_id,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> None:
        ...

    @overload
    def lambda_functions_create(
        self,
        func_id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_functions_create(
        self,
        func_id,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_functions_create(
        self,
        func_id,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_functions_create(
        self,
        func_id,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_functions_create(
        self,
        func_id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def lambda_functions_create(
        self,
        func_id,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[None, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            None
    ]:
        """lambda_functions_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_functions_create(func_id, async_req=True)
        >>> result = thread.get()

        Args:
            func_id (str):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['func_id'] = \
            func_id
        return self.lambda_functions_create_endpoint.call_with_http_info(**kwargs)

    def lambda_functions_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as lambda_functions_create(), but returns the response unprocessed.
        Equivalent to calling lambda_functions_create with
        _preload_content = False and _check_status=False

        lambda_functions_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_functions_create(func_id, async_req=True)
        >>> result = thread.get()

        Args:
            func_id (str):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.lambda_functions_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def lambda_functions_list(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> None:
        ...

    @overload
    def lambda_functions_list(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_functions_list(
        self,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_functions_list(
        self,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_functions_list(
        self,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_functions_list(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def lambda_functions_list(
        self,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[None, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            None
    ]:
        """Method returns a list of functions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_functions_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.lambda_functions_list_endpoint.call_with_http_info(**kwargs)

    def lambda_functions_list_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as lambda_functions_list(), but returns the response unprocessed.
        Equivalent to calling lambda_functions_list with
        _preload_content = False and _check_status=False

        Method returns a list of functions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_functions_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.lambda_functions_list(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def lambda_functions_retrieve(
        self,
        func_id,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> object:
        ...

    @overload
    def lambda_functions_retrieve(
        self,
        func_id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_functions_retrieve(
        self,
        func_id,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[object, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_functions_retrieve(
        self,
        func_id,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_functions_retrieve(
        self,
        func_id,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_functions_retrieve(
        self,
        func_id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def lambda_functions_retrieve(
        self,
        func_id,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[object, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            object
    ]:
        """Method returns the information about the function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_functions_retrieve(func_id, async_req=True)
        >>> result = thread.get()

        Args:
            func_id (str):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['func_id'] = \
            func_id
        return self.lambda_functions_retrieve_endpoint.call_with_http_info(**kwargs)

    def lambda_functions_retrieve_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as lambda_functions_retrieve(), but returns the response unprocessed.
        Equivalent to calling lambda_functions_retrieve with
        _preload_content = False and _check_status=False

        Method returns the information about the function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_functions_retrieve(func_id, async_req=True)
        >>> result = thread.get()

        Args:
            func_id (str):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.lambda_functions_retrieve(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def lambda_requests_create(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> None:
        ...

    @overload
    def lambda_requests_create(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_requests_create(
        self,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_requests_create(
        self,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_requests_create(
        self,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_requests_create(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def lambda_requests_create(
        self,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[None, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            None
    ]:
        """Method calls the function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_requests_create(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.lambda_requests_create_endpoint.call_with_http_info(**kwargs)

    def lambda_requests_create_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as lambda_requests_create(), but returns the response unprocessed.
        Equivalent to calling lambda_requests_create with
        _preload_content = False and _check_status=False

        Method calls the function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_requests_create(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.lambda_requests_create(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def lambda_requests_list(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> None:
        ...

    @overload
    def lambda_requests_list(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_requests_list(
        self,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_requests_list(
        self,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_requests_list(
        self,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_requests_list(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def lambda_requests_list(
        self,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[None, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            None
    ]:
        """Method returns a list of requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_requests_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.lambda_requests_list_endpoint.call_with_http_info(**kwargs)

    def lambda_requests_list_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as lambda_requests_list(), but returns the response unprocessed.
        Equivalent to calling lambda_requests_list with
        _preload_content = False and _check_status=False

        Method returns a list of requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_requests_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.lambda_requests_list(*args, **kwargs,
            _preload_content=False, _check_status=False)

    @overload
    def lambda_requests_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs
    ) -> None:
        ...

    @overload
    def lambda_requests_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_requests_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def lambda_requests_retrieve(
        self,
        id,
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_requests_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def lambda_requests_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    def lambda_requests_retrieve(
        self,
        id,
        **kwargs
    ) -> typing.Union[
            typing.Tuple[None, int, typing.Dict[str, str]],
            urllib3.HTTPResponse,
            None
    ]:
        """Method returns the status of the request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_requests_retrieve(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Request id

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_check_status'] = kwargs.get(
            '_check_status', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.lambda_requests_retrieve_endpoint.call_with_http_info(**kwargs)

    def lambda_requests_retrieve_raw(
        self,
        *args,
        **kwargs
    ) -> urllib3.HTTPResponse:
        """
        The same as lambda_requests_retrieve(), but returns the response unprocessed.
        Equivalent to calling lambda_requests_retrieve with
        _preload_content = False and _check_status=False

        Method returns the status of the request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lambda_requests_retrieve(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Request id

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.lambda_requests_retrieve(*args, **kwargs,
            _preload_content=False, _check_status=False)

