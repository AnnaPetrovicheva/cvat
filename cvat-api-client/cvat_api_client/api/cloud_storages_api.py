"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    The version of the OpenAPI document: alpha (2.0)
    Contact: nikita.manovich@intel.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations

import re  # noqa: F401
import sys  # noqa: F401
import typing
from typing import TYPE_CHECKING, overload

import urllib3

from cvat_api_client.api_client import ApiClient
from cvat_api_client.api_client import Endpoint as _Endpoint
from cvat_api_client.model.cloud_storage_read import CloudStorageRead
from cvat_api_client.model.cloud_storage_write import CloudStorageWrite
from cvat_api_client.model.cloud_storage_write_request import CloudStorageWriteRequest
from cvat_api_client.model.paginated_cloud_storage_read_list import PaginatedCloudStorageReadList
from cvat_api_client.model.patched_cloud_storage_write_request import (
    PatchedCloudStorageWriteRequest,
)
from cvat_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)

if TYPE_CHECKING:
    # Enable introspection. Can't work normally due to cyclic imports
    from cvat_api_client.apis import *
    from cvat_api_client.models import *


class CloudStoragesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.cloudstorages_create_endpoint = _Endpoint(
            settings={
                "response_type": (CloudStorageWrite,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages",
                "operation_id": "cloudstorages_create",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "cloud_storage_write_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "cloud_storage_write_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "cloud_storage_write_request": (CloudStorageWriteRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "cloud_storage_write_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.cloudstorages_destroy_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages/{id}",
                "operation_id": "cloudstorages_destroy",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.cloudstorages_list_endpoint = _Endpoint(
            settings={
                "response_type": (PaginatedCloudStorageReadList,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages",
                "operation_id": "cloudstorages_list",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "x_organization",
                    "filter",
                    "org",
                    "org_id",
                    "page",
                    "page_size",
                    "search",
                    "sort",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "x_organization": (str,),
                    "filter": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "page": (int,),
                    "page_size": (int,),
                    "search": (str,),
                    "sort": (str,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "filter": "filter",
                    "org": "org",
                    "org_id": "org_id",
                    "page": "page",
                    "page_size": "page_size",
                    "search": "search",
                    "sort": "sort",
                },
                "location_map": {
                    "x_organization": "header",
                    "filter": "query",
                    "org": "query",
                    "org_id": "query",
                    "page": "query",
                    "page_size": "query",
                    "search": "query",
                    "sort": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.cloudstorages_partial_update_endpoint = _Endpoint(
            settings={
                "response_type": (CloudStorageWrite,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages/{id}",
                "operation_id": "cloudstorages_partial_update",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                    "patched_cloud_storage_write_request",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "patched_cloud_storage_write_request": (PatchedCloudStorageWriteRequest,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                    "patched_cloud_storage_write_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.cloudstorages_retrieve_endpoint = _Endpoint(
            settings={
                "response_type": (CloudStorageRead,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages/{id}",
                "operation_id": "cloudstorages_retrieve",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.cloudstorages_retrieve_actions_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages/{id}/actions",
                "operation_id": "cloudstorages_retrieve_actions",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.cloudstorages_retrieve_content_endpoint = _Endpoint(
            settings={
                "response_type": (
                    {str: (bool, date, datetime, dict, float, int, list, str, none_type)},
                ),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages/{id}/content",
                "operation_id": "cloudstorages_retrieve_content",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "manifest_path",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "manifest_path": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "manifest_path": "manifest_path",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "manifest_path": "query",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.cloudstorages_retrieve_preview_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages/{id}/preview",
                "operation_id": "cloudstorages_retrieve_preview",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.cloudstorages_retrieve_status_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/cloudstorages/{id}/status",
                "operation_id": "cloudstorages_retrieve_status",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    @overload
    def cloudstorages_create(
        self,
        cloud_storage_write_request,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> CloudStorageWrite:
        ...

    @overload
    def cloudstorages_create(
        self,
        cloud_storage_write_request,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[CloudStorageWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_create(
        self, cloud_storage_write_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[CloudStorageWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_create(
        self, cloud_storage_write_request, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_create(
        self,
        cloud_storage_write_request,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_create(
        self,
        cloud_storage_write_request,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_create(
        self, cloud_storage_write_request, **kwargs
    ) -> typing.Union[
        typing.Tuple[CloudStorageWrite, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        CloudStorageWrite,
    ]:
        """Method creates a cloud storage with a specified characteristics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_create(cloud_storage_write_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_storage_write_request (CloudStorageWriteRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CloudStorageWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["cloud_storage_write_request"] = cloud_storage_write_request
        return self.cloudstorages_create_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_create_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_create(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_create with
        _parse_response = False and _check_status=False

        Method creates a cloud storage with a specified characteristics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_create(cloud_storage_write_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_storage_write_request (CloudStorageWriteRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CloudStorageWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_create(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def cloudstorages_destroy(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def cloudstorages_destroy(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_destroy(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_destroy(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_destroy(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_destroy(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_destroy(
        self, id, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Method deletes a specific cloud storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_destroy(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.cloudstorages_destroy_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_destroy_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_destroy(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_destroy with
        _parse_response = False and _check_status=False

        Method deletes a specific cloud storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_destroy(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_destroy(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def cloudstorages_list(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> PaginatedCloudStorageReadList:
        ...

    @overload
    def cloudstorages_list(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[PaginatedCloudStorageReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_list(
        self, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[PaginatedCloudStorageReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_list(
        self, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_list(
        self,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_list(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_list(
        self, **kwargs
    ) -> typing.Union[
        typing.Tuple[PaginatedCloudStorageReadList, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        PaginatedCloudStorageReadList,
    ]:
        """Returns a paginated list of storages according to query parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['provider_type', 'display_name', 'resource', 'credentials_type', 'owner', 'description', 'id']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('provider_type', 'display_name', 'resource', 'credentials_type', 'owner', 'description'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['provider_type', 'display_name', 'resource', 'credentials_type', 'owner', 'description', 'id']. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedCloudStorageReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.cloudstorages_list_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_list_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_list(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_list with
        _parse_response = False and _check_status=False

        Returns a paginated list of storages according to query parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['provider_type', 'display_name', 'resource', 'credentials_type', 'owner', 'description', 'id']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('provider_type', 'display_name', 'resource', 'credentials_type', 'owner', 'description'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['provider_type', 'display_name', 'resource', 'credentials_type', 'owner', 'description', 'id']. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedCloudStorageReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_list(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def cloudstorages_partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> CloudStorageWrite:
        ...

    @overload
    def cloudstorages_partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[CloudStorageWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_partial_update(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[CloudStorageWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_partial_update(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_partial_update(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[CloudStorageWrite, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        CloudStorageWrite,
    ]:
        """Methods does a partial update of chosen fields in a cloud storage instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_partial_update(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_cloud_storage_write_request (PatchedCloudStorageWriteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CloudStorageWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.cloudstorages_partial_update_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_partial_update_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_partial_update(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_partial_update with
        _parse_response = False and _check_status=False

        Methods does a partial update of chosen fields in a cloud storage instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_partial_update(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_cloud_storage_write_request (PatchedCloudStorageWriteRequest): [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CloudStorageWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_partial_update(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def cloudstorages_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> CloudStorageRead:
        ...

    @overload
    def cloudstorages_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[CloudStorageRead, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_retrieve(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[CloudStorageRead, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_retrieve(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_retrieve(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[CloudStorageRead, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        CloudStorageRead,
    ]:
        """Method returns details of a specific cloud storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CloudStorageRead
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.cloudstorages_retrieve_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_retrieve_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_retrieve(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_retrieve with
        _parse_response = False and _check_status=False

        Method returns details of a specific cloud storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CloudStorageRead
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_retrieve(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def cloudstorages_retrieve_actions(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> str:
        ...

    @overload
    def cloudstorages_retrieve_actions(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[str, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_retrieve_actions(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[str, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_retrieve_actions(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve_actions(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve_actions(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_retrieve_actions(
        self, id, **kwargs
    ) -> typing.Union[typing.Tuple[str, int, typing.Dict[str, str]], urllib3.HTTPResponse, str]:
        """Method returns allowed actions for the cloud storage  # noqa: E501

        Method return allowed actions for cloud storage. It's required for reading/writing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve_actions(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.cloudstorages_retrieve_actions_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_retrieve_actions_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_retrieve_actions(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_retrieve_actions with
        _parse_response = False and _check_status=False

        Method returns allowed actions for the cloud storage  # noqa: E501

        Method return allowed actions for cloud storage. It's required for reading/writing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve_actions(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_retrieve_actions(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def cloudstorages_retrieve_content(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> typing.Union[typing.Dict[str, (typing.Any, none_type)]]:
        ...

    @overload
    def cloudstorages_retrieve_content(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[
        typing.Union[typing.Dict[str, (typing.Any, none_type)]], int, typing.Dict[str, str]
    ]:
        ...

    @overload
    def cloudstorages_retrieve_content(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[
        typing.Union[typing.Dict[str, (typing.Any, none_type)]], int, typing.Dict[str, str]
    ]:
        ...

    @overload
    def cloudstorages_retrieve_content(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve_content(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve_content(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_retrieve_content(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[
            typing.Union[typing.Dict[str, (typing.Any, none_type)]], int, typing.Dict[str, str]
        ],
        urllib3.HTTPResponse,
        typing.Union[typing.Dict[str, (typing.Any, none_type)]],
    ]:
        """Method returns a manifest content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve_content(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            manifest_path (str): Path to the manifest file in a cloud storage. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.cloudstorages_retrieve_content_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_retrieve_content_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_retrieve_content(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_retrieve_content with
        _parse_response = False and _check_status=False

        Method returns a manifest content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve_content(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            manifest_path (str): Path to the manifest file in a cloud storage. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_retrieve_content(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def cloudstorages_retrieve_preview(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def cloudstorages_retrieve_preview(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_retrieve_preview(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_retrieve_preview(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve_preview(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve_preview(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_retrieve_preview(
        self, id, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Method returns a preview image from a cloud storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve_preview(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.cloudstorages_retrieve_preview_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_retrieve_preview_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_retrieve_preview(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_retrieve_preview with
        _parse_response = False and _check_status=False

        Method returns a preview image from a cloud storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve_preview(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_retrieve_preview(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def cloudstorages_retrieve_status(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> str:
        ...

    @overload
    def cloudstorages_retrieve_status(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[str, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_retrieve_status(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[str, int, typing.Dict[str, str]]:
        ...

    @overload
    def cloudstorages_retrieve_status(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve_status(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def cloudstorages_retrieve_status(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def cloudstorages_retrieve_status(
        self, id, **kwargs
    ) -> typing.Union[typing.Tuple[str, int, typing.Dict[str, str]], urllib3.HTTPResponse, str]:
        """Method returns a cloud storage status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve_status(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.cloudstorages_retrieve_status_endpoint.call_with_http_info(**kwargs)

    def cloudstorages_retrieve_status_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as cloudstorages_retrieve_status(), but returns the response unprocessed.
        Equivalent to calling cloudstorages_retrieve_status with
        _parse_response = False and _check_status=False

        Method returns a cloud storage status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloudstorages_retrieve_status(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud storage.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.cloudstorages_retrieve_status(
            *args, **kwargs, _parse_response=False, _check_status=False
        )
