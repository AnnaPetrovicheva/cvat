"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    The version of the OpenAPI document: alpha (2.0)
    Contact: nikita.manovich@intel.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations

import re  # noqa: F401
import sys  # noqa: F401
import typing
from typing import TYPE_CHECKING, overload

import urllib3

from cvat_api_client.api_client import ApiClient
from cvat_api_client.api_client import Endpoint as _Endpoint
from cvat_api_client.model.annotation_file_request import AnnotationFileRequest
from cvat_api_client.model.data_meta_read import DataMetaRead
from cvat_api_client.model.job_read import JobRead
from cvat_api_client.model.job_write import JobWrite
from cvat_api_client.model.job_write_request import JobWriteRequest
from cvat_api_client.model.labeled_data import LabeledData
from cvat_api_client.model.paginated_issue_read_list import PaginatedIssueReadList
from cvat_api_client.model.paginated_job_commit_list import PaginatedJobCommitList
from cvat_api_client.model.paginated_job_read_list import PaginatedJobReadList
from cvat_api_client.model.patched_job_write_request import PatchedJobWriteRequest
from cvat_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)

if TYPE_CHECKING:
    # Enable introspection. Can't work normally due to cyclic imports
    from cvat_api_client.apis import *
    from cvat_api_client.models import *


class JobsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_annotations_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/annotations/",
                "operation_id": "create_annotations",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "cloud_storage_id",
                    "filename",
                    "format",
                    "location",
                    "org",
                    "org_id",
                    "use_default_location",
                    "job_write_request",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [
                    "location",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("location",): {"CLOUD_STORAGE": "cloud_storage", "LOCAL": "local"},
                },
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "cloud_storage_id": (float,),
                    "filename": (str,),
                    "format": (str,),
                    "location": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "use_default_location": (bool,),
                    "job_write_request": (JobWriteRequest,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "cloud_storage_id": "cloud_storage_id",
                    "filename": "filename",
                    "format": "format",
                    "location": "location",
                    "org": "org",
                    "org_id": "org_id",
                    "use_default_location": "use_default_location",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "cloud_storage_id": "query",
                    "filename": "query",
                    "format": "query",
                    "location": "query",
                    "org": "query",
                    "org_id": "query",
                    "use_default_location": "query",
                    "job_write_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.destroy_annotations_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/annotations/",
                "operation_id": "destroy_annotations",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_endpoint = _Endpoint(
            settings={
                "response_type": (PaginatedJobReadList,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs",
                "operation_id": "list",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "x_organization",
                    "filter",
                    "org",
                    "org_id",
                    "page",
                    "page_size",
                    "search",
                    "sort",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "x_organization": (str,),
                    "filter": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "page": (int,),
                    "page_size": (int,),
                    "search": (str,),
                    "sort": (str,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "filter": "filter",
                    "org": "org",
                    "org_id": "org_id",
                    "page": "page",
                    "page_size": "page_size",
                    "search": "search",
                    "sort": "sort",
                },
                "location_map": {
                    "x_organization": "header",
                    "filter": "query",
                    "org": "query",
                    "org_id": "query",
                    "page": "query",
                    "page_size": "query",
                    "search": "query",
                    "sort": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_commits_endpoint = _Endpoint(
            settings={
                "response_type": (PaginatedJobCommitList,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/commits",
                "operation_id": "list_commits",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "filter",
                    "org",
                    "org_id",
                    "page",
                    "page_size",
                    "search",
                    "sort",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "filter": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "page": (int,),
                    "page_size": (int,),
                    "search": (str,),
                    "sort": (str,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "filter": "filter",
                    "org": "org",
                    "org_id": "org_id",
                    "page": "page",
                    "page_size": "page_size",
                    "search": "search",
                    "sort": "sort",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "filter": "query",
                    "org": "query",
                    "org_id": "query",
                    "page": "query",
                    "page_size": "query",
                    "search": "query",
                    "sort": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_issues_endpoint = _Endpoint(
            settings={
                "response_type": (PaginatedIssueReadList,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/issues",
                "operation_id": "list_issues",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "filter",
                    "org",
                    "org_id",
                    "page",
                    "page_size",
                    "search",
                    "sort",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "filter": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "page": (int,),
                    "page_size": (int,),
                    "search": (str,),
                    "sort": (str,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "filter": "filter",
                    "org": "org",
                    "org_id": "org_id",
                    "page": "page",
                    "page_size": "page_size",
                    "search": "search",
                    "sort": "sort",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "filter": "query",
                    "org": "query",
                    "org_id": "query",
                    "page": "query",
                    "page_size": "query",
                    "search": "query",
                    "sort": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.partial_update_endpoint = _Endpoint(
            settings={
                "response_type": (JobWrite,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}",
                "operation_id": "partial_update",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                    "patched_job_write_request",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "patched_job_write_request": (PatchedJobWriteRequest,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                    "patched_job_write_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.partial_update_annotations_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/annotations/",
                "operation_id": "partial_update_annotations",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "action",
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                    "patched_job_write_request",
                ],
                "required": [
                    "action",
                    "id",
                ],
                "nullable": [],
                "enum": [
                    "action",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("action",): {"CREATE": "create", "DELETE": "delete", "UPDATE": "update"},
                },
                "openapi_types": {
                    "action": (str,),
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "patched_job_write_request": (PatchedJobWriteRequest,),
                },
                "attribute_map": {
                    "action": "action",
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "action": "query",
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                    "patched_job_write_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.partial_update_annotations_file_endpoint = _Endpoint(
            settings={
                "response_type": (JobWrite,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/annotations/{file_id}",
                "operation_id": "partial_update_annotations_file",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "file_id",
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                    "patched_job_write_request",
                ],
                "required": [
                    "file_id",
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [
                    "file_id",
                ],
            },
            root_map={
                "validations": {
                    ("file_id",): {
                        "regex": {
                            "pattern": r"^\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$",  # noqa: E501
                        },
                    },
                },
                "allowed_values": {},
                "openapi_types": {
                    "file_id": (str,),
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "patched_job_write_request": (PatchedJobWriteRequest,),
                },
                "attribute_map": {
                    "file_id": "file_id",
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "file_id": "path",
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                    "patched_job_write_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.retrieve_endpoint = _Endpoint(
            settings={
                "response_type": (JobRead,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}",
                "operation_id": "retrieve",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_annotations_endpoint = _Endpoint(
            settings={
                "response_type": (LabeledData,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/annotations/",
                "operation_id": "retrieve_annotations",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "action",
                    "cloud_storage_id",
                    "filename",
                    "format",
                    "location",
                    "org",
                    "org_id",
                    "use_default_location",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [
                    "action",
                    "location",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("action",): {"DOWNLOAD": "download"},
                    ("location",): {"CLOUD_STORAGE": "cloud_storage", "LOCAL": "local"},
                },
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "action": (str,),
                    "cloud_storage_id": (float,),
                    "filename": (str,),
                    "format": (str,),
                    "location": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "use_default_location": (bool,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "action": "action",
                    "cloud_storage_id": "cloud_storage_id",
                    "filename": "filename",
                    "format": "format",
                    "location": "location",
                    "org": "org",
                    "org_id": "org_id",
                    "use_default_location": "use_default_location",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "action": "query",
                    "cloud_storage_id": "query",
                    "filename": "query",
                    "format": "query",
                    "location": "query",
                    "org": "query",
                    "org_id": "query",
                    "use_default_location": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_data_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/data",
                "operation_id": "retrieve_data",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "number",
                    "quality",
                    "type",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                    "number",
                    "quality",
                    "type",
                ],
                "nullable": [],
                "enum": [
                    "quality",
                    "type",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("quality",): {"COMPRESSED": "compressed", "ORIGINAL": "original"},
                    ("type",): {
                        "CHUNK": "chunk",
                        "CONTEXT_IMAGE": "context_image",
                        "FRAME": "frame",
                        "PREVIEW": "preview",
                    },
                },
                "openapi_types": {
                    "id": (int,),
                    "number": (float,),
                    "quality": (str,),
                    "type": (str,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "number": "number",
                    "quality": "quality",
                    "type": "type",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "number": "query",
                    "quality": "query",
                    "type": "query",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_data_meta_endpoint = _Endpoint(
            settings={
                "response_type": (DataMetaRead,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/data/meta",
                "operation_id": "retrieve_data_meta",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_dataset_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/dataset",
                "operation_id": "retrieve_dataset",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "format",
                    "id",
                    "x_organization",
                    "action",
                    "cloud_storage_id",
                    "filename",
                    "location",
                    "org",
                    "org_id",
                    "use_default_location",
                ],
                "required": [
                    "format",
                    "id",
                ],
                "nullable": [],
                "enum": [
                    "action",
                    "location",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("action",): {"DOWNLOAD": "download"},
                    ("location",): {"CLOUD_STORAGE": "cloud_storage", "LOCAL": "local"},
                },
                "openapi_types": {
                    "format": (str,),
                    "id": (int,),
                    "x_organization": (str,),
                    "action": (str,),
                    "cloud_storage_id": (float,),
                    "filename": (str,),
                    "location": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "use_default_location": (bool,),
                },
                "attribute_map": {
                    "format": "format",
                    "id": "id",
                    "x_organization": "X-Organization",
                    "action": "action",
                    "cloud_storage_id": "cloud_storage_id",
                    "filename": "filename",
                    "location": "location",
                    "org": "org",
                    "org_id": "org_id",
                    "use_default_location": "use_default_location",
                },
                "location_map": {
                    "format": "query",
                    "id": "path",
                    "x_organization": "header",
                    "action": "query",
                    "cloud_storage_id": "query",
                    "filename": "query",
                    "location": "query",
                    "org": "query",
                    "org_id": "query",
                    "use_default_location": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.update_endpoint = _Endpoint(
            settings={
                "response_type": (JobWrite,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}",
                "operation_id": "update",
                "http_method": "PUT",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                    "job_write_request",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "job_write_request": (JobWriteRequest,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                    "job_write_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.update_annotations_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/jobs/{id}/annotations/",
                "operation_id": "update_annotations",
                "http_method": "PUT",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "annotation_file_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                    "annotation_file_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "annotation_file_request": (AnnotationFileRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "annotation_file_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )

    @overload
    def create_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def create_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_annotations(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_annotations(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_annotations(
        self, id, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Method allows to upload job annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_annotations(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            cloud_storage_id (float): Storage id. [optional]
            filename (str): Annotation file name. [optional]
            format (str): Input format name You can get the list of supported formats at: /server/annotation/formats. [optional]
            location (str): where to import the annotation from. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            use_default_location (bool): Use the location that was configured in the task to import annotation. [optional] if omitted the server will use the default value of True
            job_write_request (JobWriteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.create_annotations_endpoint.call_with_http_info(**kwargs)

    def create_annotations_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_annotations(), but returns the response unprocessed.
        Equivalent to calling create_annotations with
        _parse_response = False and _check_status=False

        Method allows to upload job annotations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_annotations(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            cloud_storage_id (float): Storage id. [optional]
            filename (str): Annotation file name. [optional]
            format (str): Input format name You can get the list of supported formats at: /server/annotation/formats. [optional]
            location (str): where to import the annotation from. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            use_default_location (bool): Use the location that was configured in the task to import annotation. [optional] if omitted the server will use the default value of True
            job_write_request (JobWriteRequest): [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_annotations(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def destroy_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def destroy_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def destroy_annotations(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def destroy_annotations(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def destroy_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def destroy_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def destroy_annotations(
        self, id, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Method deletes all annotations for a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.destroy_annotations(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.destroy_annotations_endpoint.call_with_http_info(**kwargs)

    def destroy_annotations_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as destroy_annotations(), but returns the response unprocessed.
        Equivalent to calling destroy_annotations with
        _parse_response = False and _check_status=False

        Method deletes all annotations for a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.destroy_annotations(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.destroy_annotations(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def list(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> PaginatedJobReadList:
        ...

    @overload
    def list(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[PaginatedJobReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def list(
        self, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[PaginatedJobReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def list(self, _parse_response: typing.Literal[False], **kwargs) -> urllib3.HTTPResponse:
        ...

    @overload
    def list(
        self,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def list(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def list(
        self, **kwargs
    ) -> typing.Union[
        typing.Tuple[PaginatedJobReadList, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        PaginatedJobReadList,
    ]:
        """Method returns a paginated list of jobs according to query parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('task_name', 'project_name', 'assignee', 'state', 'stage'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedJobReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.list_endpoint.call_with_http_info(**kwargs)

    def list_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as list(), but returns the response unprocessed.
        Equivalent to calling list with
        _parse_response = False and _check_status=False

        Method returns a paginated list of jobs according to query parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('task_name', 'project_name', 'assignee', 'state', 'stage'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedJobReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.list(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def list_commits(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> PaginatedJobCommitList:
        ...

    @overload
    def list_commits(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[PaginatedJobCommitList, int, typing.Dict[str, str]]:
        ...

    @overload
    def list_commits(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[PaginatedJobCommitList, int, typing.Dict[str, str]]:
        ...

    @overload
    def list_commits(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def list_commits(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def list_commits(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def list_commits(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[PaginatedJobCommitList, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        PaginatedJobCommitList,
    ]:
        """The action returns the list of tracked changes for the job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_commits(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('task_name', 'project_name', 'assignee', 'state', 'stage'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedJobCommitList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.list_commits_endpoint.call_with_http_info(**kwargs)

    def list_commits_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as list_commits(), but returns the response unprocessed.
        Equivalent to calling list_commits with
        _parse_response = False and _check_status=False

        The action returns the list of tracked changes for the job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_commits(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('task_name', 'project_name', 'assignee', 'state', 'stage'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedJobCommitList
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.list_commits(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def list_issues(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> PaginatedIssueReadList:
        ...

    @overload
    def list_issues(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[PaginatedIssueReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def list_issues(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[PaginatedIssueReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def list_issues(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def list_issues(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def list_issues(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def list_issues(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[PaginatedIssueReadList, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        PaginatedIssueReadList,
    ]:
        """Method returns list of issues for the job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_issues(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('task_name', 'project_name', 'assignee', 'state', 'stage'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedIssueReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.list_issues_endpoint.call_with_http_info(**kwargs)

    def list_issues_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as list_issues(), but returns the response unprocessed.
        Equivalent to calling list_issues with
        _parse_response = False and _check_status=False

        Method returns list of issues for the job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_issues(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('task_name', 'project_name', 'assignee', 'state', 'stage'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['task_name', 'project_name', 'assignee', 'state', 'stage', 'id', 'task_id', 'project_id', 'updated_date']. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedIssueReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.list_issues(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> JobWrite:
        ...

    @overload
    def partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[JobWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def partial_update(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[JobWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def partial_update(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def partial_update(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[JobWrite, int, typing.Dict[str, str]], urllib3.HTTPResponse, JobWrite
    ]:
        """Methods does a partial update of chosen fields in a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partial_update(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_job_write_request (PatchedJobWriteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.partial_update_endpoint.call_with_http_info(**kwargs)

    def partial_update_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as partial_update(), but returns the response unprocessed.
        Equivalent to calling partial_update with
        _parse_response = False and _check_status=False

        Methods does a partial update of chosen fields in a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partial_update(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_job_write_request (PatchedJobWriteRequest): [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.partial_update(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def partial_update_annotations(
        self,
        action,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def partial_update_annotations(
        self,
        action,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def partial_update_annotations(
        self, action, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def partial_update_annotations(
        self, action, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def partial_update_annotations(
        self,
        action,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def partial_update_annotations(
        self,
        action,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def partial_update_annotations(
        self, action, id, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Method performs a partial update of annotations in a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partial_update_annotations(action, id, async_req=True)
        >>> result = thread.get()

        Args:
            action (str):
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_job_write_request (PatchedJobWriteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["action"] = action
        kwargs["id"] = id
        return self.partial_update_annotations_endpoint.call_with_http_info(**kwargs)

    def partial_update_annotations_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as partial_update_annotations(), but returns the response unprocessed.
        Equivalent to calling partial_update_annotations with
        _parse_response = False and _check_status=False

        Method performs a partial update of annotations in a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partial_update_annotations(action, id, async_req=True)
        >>> result = thread.get()

        Args:
            action (str):
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_job_write_request (PatchedJobWriteRequest): [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.partial_update_annotations(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def partial_update_annotations_file(
        self,
        file_id,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> JobWrite:
        ...

    @overload
    def partial_update_annotations_file(
        self,
        file_id,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[JobWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def partial_update_annotations_file(
        self, file_id, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[JobWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def partial_update_annotations_file(
        self, file_id, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def partial_update_annotations_file(
        self,
        file_id,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def partial_update_annotations_file(
        self,
        file_id,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def partial_update_annotations_file(
        self, file_id, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[JobWrite, int, typing.Dict[str, str]], urllib3.HTTPResponse, JobWrite
    ]:
        """Allows to upload an annotation file chunk. Implements TUS file uploading protocol.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partial_update_annotations_file(file_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            file_id (str):
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_job_write_request (PatchedJobWriteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["file_id"] = file_id
        kwargs["id"] = id
        return self.partial_update_annotations_file_endpoint.call_with_http_info(**kwargs)

    def partial_update_annotations_file_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as partial_update_annotations_file(), but returns the response unprocessed.
        Equivalent to calling partial_update_annotations_file with
        _parse_response = False and _check_status=False

        Allows to upload an annotation file chunk. Implements TUS file uploading protocol.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partial_update_annotations_file(file_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            file_id (str):
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_job_write_request (PatchedJobWriteRequest): [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.partial_update_annotations_file(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> JobRead:
        ...

    @overload
    def retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[JobRead, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[JobRead, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[JobRead, int, typing.Dict[str, str]], urllib3.HTTPResponse, JobRead
    ]:
        """Method returns details of a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobRead
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.retrieve_endpoint.call_with_http_info(**kwargs)

    def retrieve_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve(), but returns the response unprocessed.
        Equivalent to calling retrieve with
        _parse_response = False and _check_status=False

        Method returns details of a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobRead
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def retrieve_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> LabeledData:
        ...

    @overload
    def retrieve_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[LabeledData, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_annotations(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[LabeledData, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_annotations(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_annotations(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve_annotations(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[LabeledData, int, typing.Dict[str, str]], urllib3.HTTPResponse, LabeledData
    ]:
        """Method returns annotations for a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_annotations(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            action (str): Used to start downloading process after annotation file had been created. [optional] if omitted the server will use the default value of "download"
            cloud_storage_id (float): Storage id. [optional]
            filename (str): Desired output file name. [optional]
            format (str): Desired output format name You can get the list of supported formats at: /server/annotation/formats. [optional]
            location (str): Where need to save downloaded annotation. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            use_default_location (bool): Use the location that was configured in the task to export annotation. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LabeledData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.retrieve_annotations_endpoint.call_with_http_info(**kwargs)

    def retrieve_annotations_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve_annotations(), but returns the response unprocessed.
        Equivalent to calling retrieve_annotations with
        _parse_response = False and _check_status=False

        Method returns annotations for a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_annotations(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            action (str): Used to start downloading process after annotation file had been created. [optional] if omitted the server will use the default value of "download"
            cloud_storage_id (float): Storage id. [optional]
            filename (str): Desired output file name. [optional]
            format (str): Desired output format name You can get the list of supported formats at: /server/annotation/formats. [optional]
            location (str): Where need to save downloaded annotation. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            use_default_location (bool): Use the location that was configured in the task to export annotation. [optional] if omitted the server will use the default value of True
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LabeledData
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve_annotations(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def retrieve_data(
        self,
        id,
        number,
        quality,
        type,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def retrieve_data(
        self,
        id,
        number,
        quality,
        type,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_data(
        self, id, number, quality, type, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_data(
        self, id, number, quality, type, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_data(
        self,
        id,
        number,
        quality,
        type,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_data(
        self,
        id,
        number,
        quality,
        type,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve_data(
        self, id, number, quality, type, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Method returns data for a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_data(id, number, quality, type, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.
            number (float): A unique number value identifying chunk or frame, doesn't matter for 'preview' type
            quality (str): Specifies the quality level of the requested data, doesn't matter for 'preview' type
            type (str): Specifies the type of the requested data

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        kwargs["number"] = number
        kwargs["quality"] = quality
        kwargs["type"] = type
        return self.retrieve_data_endpoint.call_with_http_info(**kwargs)

    def retrieve_data_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve_data(), but returns the response unprocessed.
        Equivalent to calling retrieve_data with
        _parse_response = False and _check_status=False

        Method returns data for a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_data(id, number, quality, type, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.
            number (float): A unique number value identifying chunk or frame, doesn't matter for 'preview' type
            quality (str): Specifies the quality level of the requested data, doesn't matter for 'preview' type
            type (str): Specifies the type of the requested data

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve_data(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def retrieve_data_meta(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> DataMetaRead:
        ...

    @overload
    def retrieve_data_meta(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[DataMetaRead, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_data_meta(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[DataMetaRead, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_data_meta(
        self, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_data_meta(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_data_meta(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve_data_meta(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[DataMetaRead, int, typing.Dict[str, str]], urllib3.HTTPResponse, DataMetaRead
    ]:
        """Method provides a meta information about media files which are related with the job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_data_meta(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DataMetaRead
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.retrieve_data_meta_endpoint.call_with_http_info(**kwargs)

    def retrieve_data_meta_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve_data_meta(), but returns the response unprocessed.
        Equivalent to calling retrieve_data_meta with
        _parse_response = False and _check_status=False

        Method provides a meta information about media files which are related with the job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_data_meta(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DataMetaRead
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve_data_meta(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def retrieve_dataset(
        self,
        format,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def retrieve_dataset(
        self,
        format,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_dataset(
        self, format, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_dataset(
        self, format, id, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_dataset(
        self,
        format,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_dataset(
        self,
        format,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve_dataset(
        self, format, id, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Export job as a dataset in a specific format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_dataset(format, id, async_req=True)
        >>> result = thread.get()

        Args:
            format (str): Desired output format name You can get the list of supported formats at: /server/annotation/formats
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            action (str): Used to start downloading process after annotation file had been created. [optional] if omitted the server will use the default value of "download"
            cloud_storage_id (float): Storage id. [optional]
            filename (str): Desired output file name. [optional]
            location (str): Where need to save downloaded dataset. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            use_default_location (bool): Use the location that was configured in the task to export dataset. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["format"] = format
        kwargs["id"] = id
        return self.retrieve_dataset_endpoint.call_with_http_info(**kwargs)

    def retrieve_dataset_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve_dataset(), but returns the response unprocessed.
        Equivalent to calling retrieve_dataset with
        _parse_response = False and _check_status=False

        Export job as a dataset in a specific format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_dataset(format, id, async_req=True)
        >>> result = thread.get()

        Args:
            format (str): Desired output format name You can get the list of supported formats at: /server/annotation/formats
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            action (str): Used to start downloading process after annotation file had been created. [optional] if omitted the server will use the default value of "download"
            cloud_storage_id (float): Storage id. [optional]
            filename (str): Desired output file name. [optional]
            location (str): Where need to save downloaded dataset. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            use_default_location (bool): Use the location that was configured in the task to export dataset. [optional] if omitted the server will use the default value of True
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve_dataset(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def update(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> JobWrite:
        ...

    @overload
    def update(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[JobWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def update(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[JobWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def update(self, id, _parse_response: typing.Literal[False], **kwargs) -> urllib3.HTTPResponse:
        ...

    @overload
    def update(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def update(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def update(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[JobWrite, int, typing.Dict[str, str]], urllib3.HTTPResponse, JobWrite
    ]:
        """Method updates a job by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            job_write_request (JobWriteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.update_endpoint.call_with_http_info(**kwargs)

    def update_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as update(), but returns the response unprocessed.
        Equivalent to calling update with
        _parse_response = False and _check_status=False

        Method updates a job by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            job_write_request (JobWriteRequest): [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JobWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.update(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def update_annotations(
        self,
        id,
        annotation_file_request,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def update_annotations(
        self,
        id,
        annotation_file_request,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def update_annotations(
        self, id, annotation_file_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def update_annotations(
        self, id, annotation_file_request, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def update_annotations(
        self,
        id,
        annotation_file_request,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def update_annotations(
        self,
        id,
        annotation_file_request,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def update_annotations(
        self, id, annotation_file_request, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Method performs an update of all annotations in a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_annotations(id, annotation_file_request, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.
            annotation_file_request (AnnotationFileRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        kwargs["annotation_file_request"] = annotation_file_request
        return self.update_annotations_endpoint.call_with_http_info(**kwargs)

    def update_annotations_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as update_annotations(), but returns the response unprocessed.
        Equivalent to calling update_annotations with
        _parse_response = False and _check_status=False

        Method performs an update of all annotations in a specific job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_annotations(id, annotation_file_request, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this job.
            annotation_file_request (AnnotationFileRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.update_annotations(*args, **kwargs, _parse_response=False, _check_status=False)
