"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    The version of the OpenAPI document: alpha (2.0)
    Contact: nikita.manovich@intel.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations

import re  # noqa: F401
import sys  # noqa: F401
import typing
from typing import TYPE_CHECKING, overload

import urllib3

from cvat_api_client.api_client import ApiClient
from cvat_api_client.api_client import Endpoint as _Endpoint
from cvat_api_client.model.about import About
from cvat_api_client.model.dataset_formats import DatasetFormats
from cvat_api_client.model.exception import Exception
from cvat_api_client.model.exception_request import ExceptionRequest
from cvat_api_client.model.file_info import FileInfo
from cvat_api_client.model.log_event import LogEvent
from cvat_api_client.model.log_event_request import LogEventRequest
from cvat_api_client.model.plugins import Plugins
from cvat_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)

if TYPE_CHECKING:
    # Enable introspection. Can't work normally due to cyclic imports
    from cvat_api_client.apis import *
    from cvat_api_client.models import *


class ServerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_exception_endpoint = _Endpoint(
            settings={
                "response_type": (Exception,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/server/exception",
                "operation_id": "create_exception",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "exception_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "exception_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "exception_request": (ExceptionRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "exception_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.create_logs_endpoint = _Endpoint(
            settings={
                "response_type": ([LogEvent],),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/server/logs",
                "operation_id": "create_logs",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "log_event_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "log_event_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "log_event_request": ([LogEventRequest],),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "log_event_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.list_share_endpoint = _Endpoint(
            settings={
                "response_type": ([FileInfo],),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/server/share",
                "operation_id": "list_share",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "x_organization",
                    "directory",
                    "org",
                    "org_id",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "x_organization": (str,),
                    "directory": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "directory": "directory",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "x_organization": "header",
                    "directory": "query",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_about_endpoint = _Endpoint(
            settings={
                "response_type": (About,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/server/about",
                "operation_id": "retrieve_about",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_annotation_formats_endpoint = _Endpoint(
            settings={
                "response_type": (DatasetFormats,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/server/annotation/formats",
                "operation_id": "retrieve_annotation_formats",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_plugins_endpoint = _Endpoint(
            settings={
                "response_type": (Plugins,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/server/plugins",
                "operation_id": "retrieve_plugins",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    @overload
    def create_exception(
        self,
        exception_request,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> Exception:
        ...

    @overload
    def create_exception(
        self,
        exception_request,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[Exception, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_exception(
        self, exception_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[Exception, int, typing.Dict[str, str]]:
        ...

    @overload
    def create_exception(
        self, exception_request, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_exception(
        self,
        exception_request,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_exception(
        self,
        exception_request,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_exception(
        self, exception_request, **kwargs
    ) -> typing.Union[
        typing.Tuple[Exception, int, typing.Dict[str, str]], urllib3.HTTPResponse, Exception
    ]:
        """Method saves an exception from a client on the server  # noqa: E501

        Sends logs to the ELK if it is connected  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_exception(exception_request, async_req=True)
        >>> result = thread.get()

        Args:
            exception_request (ExceptionRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Exception
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["exception_request"] = exception_request
        return self.create_exception_endpoint.call_with_http_info(**kwargs)

    def create_exception_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_exception(), but returns the response unprocessed.
        Equivalent to calling create_exception with
        _parse_response = False and _check_status=False

        Method saves an exception from a client on the server  # noqa: E501

        Sends logs to the ELK if it is connected  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_exception(exception_request, async_req=True)
        >>> result = thread.get()

        Args:
            exception_request (ExceptionRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Exception
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_exception(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def create_logs(
        self,
        log_event_request,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> typing.List[LogEvent]:
        ...

    @overload
    def create_logs(
        self,
        log_event_request,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[typing.List[LogEvent], int, typing.Dict[str, str]]:
        ...

    @overload
    def create_logs(
        self, log_event_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[typing.List[LogEvent], int, typing.Dict[str, str]]:
        ...

    @overload
    def create_logs(
        self, log_event_request, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_logs(
        self,
        log_event_request,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create_logs(
        self,
        log_event_request,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create_logs(
        self, log_event_request, **kwargs
    ) -> typing.Union[
        typing.Tuple[typing.List[LogEvent], int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        typing.List[LogEvent],
    ]:
        """Method saves logs from a client on the server  # noqa: E501

        Sends logs to the ELK if it is connected  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_logs(log_event_request, async_req=True)
        >>> result = thread.get()

        Args:
            log_event_request ([LogEventRequest]):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [LogEvent]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["log_event_request"] = log_event_request
        return self.create_logs_endpoint.call_with_http_info(**kwargs)

    def create_logs_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create_logs(), but returns the response unprocessed.
        Equivalent to calling create_logs with
        _parse_response = False and _check_status=False

        Method saves logs from a client on the server  # noqa: E501

        Sends logs to the ELK if it is connected  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_logs(log_event_request, async_req=True)
        >>> result = thread.get()

        Args:
            log_event_request ([LogEventRequest]):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [LogEvent]
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create_logs(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def list_share(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> typing.List[FileInfo]:
        ...

    @overload
    def list_share(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[typing.List[FileInfo], int, typing.Dict[str, str]]:
        ...

    @overload
    def list_share(
        self, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[typing.List[FileInfo], int, typing.Dict[str, str]]:
        ...

    @overload
    def list_share(self, _parse_response: typing.Literal[False], **kwargs) -> urllib3.HTTPResponse:
        ...

    @overload
    def list_share(
        self,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def list_share(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def list_share(
        self, **kwargs
    ) -> typing.Union[
        typing.Tuple[typing.List[FileInfo], int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        typing.List[FileInfo],
    ]:
        """Returns all files and folders that are on the server along specified path  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_share(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            directory (str): Directory to browse. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [FileInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.list_share_endpoint.call_with_http_info(**kwargs)

    def list_share_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as list_share(), but returns the response unprocessed.
        Equivalent to calling list_share with
        _parse_response = False and _check_status=False

        Returns all files and folders that are on the server along specified path  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_share(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            directory (str): Directory to browse. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [FileInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.list_share(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def retrieve_about(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> About:
        ...

    @overload
    def retrieve_about(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[About, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_about(
        self, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[About, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_about(
        self, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_about(
        self,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_about(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve_about(
        self, **kwargs
    ) -> typing.Union[typing.Tuple[About, int, typing.Dict[str, str]], urllib3.HTTPResponse, About]:
        """Method provides basic CVAT information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_about(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            About
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.retrieve_about_endpoint.call_with_http_info(**kwargs)

    def retrieve_about_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve_about(), but returns the response unprocessed.
        Equivalent to calling retrieve_about with
        _parse_response = False and _check_status=False

        Method provides basic CVAT information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_about(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            About
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve_about(*args, **kwargs, _parse_response=False, _check_status=False)

    @overload
    def retrieve_annotation_formats(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> DatasetFormats:
        ...

    @overload
    def retrieve_annotation_formats(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[DatasetFormats, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_annotation_formats(
        self, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[DatasetFormats, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_annotation_formats(
        self, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_annotation_formats(
        self,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_annotation_formats(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve_annotation_formats(
        self, **kwargs
    ) -> typing.Union[
        typing.Tuple[DatasetFormats, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        DatasetFormats,
    ]:
        """Method provides the list of supported annotations formats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_annotation_formats(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DatasetFormats
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.retrieve_annotation_formats_endpoint.call_with_http_info(**kwargs)

    def retrieve_annotation_formats_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve_annotation_formats(), but returns the response unprocessed.
        Equivalent to calling retrieve_annotation_formats with
        _parse_response = False and _check_status=False

        Method provides the list of supported annotations formats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_annotation_formats(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DatasetFormats
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve_annotation_formats(
            *args, **kwargs, _parse_response=False, _check_status=False
        )

    @overload
    def retrieve_plugins(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _parse_response: typing.Literal[True] = True,
        **kwargs,
    ) -> Plugins:
        ...

    @overload
    def retrieve_plugins(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[Plugins, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_plugins(
        self, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[Plugins, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve_plugins(
        self, _parse_response: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_plugins(
        self,
        _return_http_data_only: typing.Literal[True],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve_plugins(
        self,
        _return_http_data_only: typing.Literal[False],
        _parse_response: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve_plugins(
        self, **kwargs
    ) -> typing.Union[
        typing.Tuple[Plugins, int, typing.Dict[str, str]], urllib3.HTTPResponse, Plugins
    ]:
        """Method provides allowed plugins  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_plugins(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _parse_response (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Plugins
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_parse_response"] = kwargs.get("_parse_response", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.retrieve_plugins_endpoint.call_with_http_info(**kwargs)

    def retrieve_plugins_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve_plugins(), but returns the response unprocessed.
        Equivalent to calling retrieve_plugins with
        _parse_response = False and _check_status=False

        Method provides allowed plugins  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_plugins(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Plugins
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve_plugins(*args, **kwargs, _parse_response=False, _check_status=False)
