"""
    CVAT REST API

    REST API for Computer Vision Annotation Tool (CVAT)  # noqa: E501

    The version of the OpenAPI document: alpha (2.0)
    Contact: nikita.manovich@intel.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations

import re  # noqa: F401
import sys  # noqa: F401
import typing
from typing import TYPE_CHECKING, overload

import urllib3

from cvat_api_client.api_client import ApiClient
from cvat_api_client.api_client import Endpoint as _Endpoint
from cvat_api_client.model.issue_read import IssueRead
from cvat_api_client.model.issue_write import IssueWrite
from cvat_api_client.model.issue_write_request import IssueWriteRequest
from cvat_api_client.model.paginated_comment_read_list import PaginatedCommentReadList
from cvat_api_client.model.paginated_issue_read_list import PaginatedIssueReadList
from cvat_api_client.model.patched_issue_write_request import PatchedIssueWriteRequest
from cvat_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)

if TYPE_CHECKING:
    # Enable introspection. Can't work normally due to cyclic imports
    from cvat_api_client.apis import *
    from cvat_api_client.models import *


class IssuesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.comments_list_endpoint = _Endpoint(
            settings={
                "response_type": (PaginatedCommentReadList,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/issues/{id}/comments",
                "operation_id": "comments_list",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "filter",
                    "org",
                    "org_id",
                    "page",
                    "page_size",
                    "search",
                    "sort",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "filter": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "page": (int,),
                    "page_size": (int,),
                    "search": (str,),
                    "sort": (str,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "filter": "filter",
                    "org": "org",
                    "org_id": "org_id",
                    "page": "page",
                    "page_size": "page_size",
                    "search": "search",
                    "sort": "sort",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "filter": "query",
                    "org": "query",
                    "org_id": "query",
                    "page": "query",
                    "page_size": "query",
                    "search": "query",
                    "sort": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.create_endpoint = _Endpoint(
            settings={
                "response_type": (IssueWrite,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/issues",
                "operation_id": "create",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "issue_write_request",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "issue_write_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "issue_write_request": (IssueWriteRequest,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "issue_write_request": "body",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.destroy_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/issues/{id}",
                "operation_id": "destroy",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_endpoint = _Endpoint(
            settings={
                "response_type": (PaginatedIssueReadList,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/issues",
                "operation_id": "list",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "x_organization",
                    "filter",
                    "org",
                    "org_id",
                    "page",
                    "page_size",
                    "search",
                    "sort",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "x_organization": (str,),
                    "filter": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "page": (int,),
                    "page_size": (int,),
                    "search": (str,),
                    "sort": (str,),
                },
                "attribute_map": {
                    "x_organization": "X-Organization",
                    "filter": "filter",
                    "org": "org",
                    "org_id": "org_id",
                    "page": "page",
                    "page_size": "page_size",
                    "search": "search",
                    "sort": "sort",
                },
                "location_map": {
                    "x_organization": "header",
                    "filter": "query",
                    "org": "query",
                    "org_id": "query",
                    "page": "query",
                    "page_size": "query",
                    "search": "query",
                    "sort": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.partial_update_endpoint = _Endpoint(
            settings={
                "response_type": (IssueWrite,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/issues/{id}",
                "operation_id": "partial_update",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                    "patched_issue_write_request",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                    "patched_issue_write_request": (PatchedIssueWriteRequest,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                    "patched_issue_write_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [
                    "application/json",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "application/offset+octet-stream",
                ],
            },
            api_client=api_client,
        )
        self.retrieve_endpoint = _Endpoint(
            settings={
                "response_type": (IssueRead,),
                "auth": ["SignatureAuthentication", "basicAuth", "cookieAuth", "tokenAuth"],
                "endpoint_path": "/api/issues/{id}",
                "operation_id": "retrieve",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "x_organization",
                    "org",
                    "org_id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (int,),
                    "x_organization": (str,),
                    "org": (str,),
                    "org_id": (int,),
                },
                "attribute_map": {
                    "id": "id",
                    "x_organization": "X-Organization",
                    "org": "org",
                    "org_id": "org_id",
                },
                "location_map": {
                    "id": "path",
                    "x_organization": "header",
                    "org": "query",
                    "org_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.cvat+json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    @overload
    def comments_list(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> PaginatedCommentReadList:
        ...

    @overload
    def comments_list(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[PaginatedCommentReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def comments_list(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[PaginatedCommentReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def comments_list(
        self, id, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def comments_list(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def comments_list(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def comments_list(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[PaginatedCommentReadList, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        PaginatedCommentReadList,
    ]:
        """The action returns all comments of a specific issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.comments_list(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this issue.

        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['owner', 'assignee', 'id', 'job_id', 'task_id', 'resolved']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('owner', 'assignee'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['owner', 'assignee', 'id', 'job_id', 'task_id', 'resolved']. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedCommentReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.comments_list_endpoint.call_with_http_info(**kwargs)

    def comments_list_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as comments_list(), but returns the response unprocessed.
        Equivalent to calling comments_list with
        _preload_content = False and _check_status=False

        The action returns all comments of a specific issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.comments_list(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this issue.

        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['owner', 'assignee', 'id', 'job_id', 'task_id', 'resolved']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('owner', 'assignee'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['owner', 'assignee', 'id', 'job_id', 'task_id', 'resolved']. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedCommentReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.comments_list(*args, **kwargs, _preload_content=False, _check_status=False)

    @overload
    def create(
        self,
        issue_write_request,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> IssueWrite:
        ...

    @overload
    def create(
        self,
        issue_write_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[IssueWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def create(
        self, issue_write_request, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[IssueWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def create(
        self, issue_write_request, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create(
        self,
        issue_write_request,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def create(
        self,
        issue_write_request,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def create(
        self, issue_write_request, **kwargs
    ) -> typing.Union[
        typing.Tuple[IssueWrite, int, typing.Dict[str, str]], urllib3.HTTPResponse, IssueWrite
    ]:
        """Method creates an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create(issue_write_request, async_req=True)
        >>> result = thread.get()

        Args:
            issue_write_request (IssueWriteRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IssueWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["issue_write_request"] = issue_write_request
        return self.create_endpoint.call_with_http_info(**kwargs)

    def create_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as create(), but returns the response unprocessed.
        Equivalent to calling create with
        _preload_content = False and _check_status=False

        Method creates an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create(issue_write_request, async_req=True)
        >>> result = thread.get()

        Args:
            issue_write_request (IssueWriteRequest):

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IssueWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.create(*args, **kwargs, _preload_content=False, _check_status=False)

    @overload
    def destroy(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> None:
        ...

    @overload
    def destroy(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def destroy(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[None, int, typing.Dict[str, str]]:
        ...

    @overload
    def destroy(
        self, id, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def destroy(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def destroy(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def destroy(
        self, id, **kwargs
    ) -> typing.Union[typing.Tuple[None, int, typing.Dict[str, str]], urllib3.HTTPResponse, None]:
        """Method deletes an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.destroy(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this issue.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.destroy_endpoint.call_with_http_info(**kwargs)

    def destroy_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as destroy(), but returns the response unprocessed.
        Equivalent to calling destroy with
        _preload_content = False and _check_status=False

        Method deletes an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.destroy(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this issue.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.destroy(*args, **kwargs, _preload_content=False, _check_status=False)

    @overload
    def list(
        self,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> PaginatedIssueReadList:
        ...

    @overload
    def list(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[PaginatedIssueReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def list(
        self, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[PaginatedIssueReadList, int, typing.Dict[str, str]]:
        ...

    @overload
    def list(self, _preload_content: typing.Literal[False], **kwargs) -> urllib3.HTTPResponse:
        ...

    @overload
    def list(
        self,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def list(
        self,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def list(
        self, **kwargs
    ) -> typing.Union[
        typing.Tuple[PaginatedIssueReadList, int, typing.Dict[str, str]],
        urllib3.HTTPResponse,
        PaginatedIssueReadList,
    ]:
        """Method returns a paginated list of issues according to query parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['owner', 'assignee', 'id', 'job_id', 'task_id', 'resolved']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('owner', 'assignee'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['owner', 'assignee', 'id', 'job_id', 'task_id', 'resolved']. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedIssueReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.list_endpoint.call_with_http_info(**kwargs)

    def list_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as list(), but returns the response unprocessed.
        Equivalent to calling list with
        _preload_content = False and _check_status=False

        Method returns a paginated list of issues according to query parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_organization (str): [optional]
            filter (str): A filter term. Avaliable filter_fields: ['owner', 'assignee', 'id', 'job_id', 'task_id', 'resolved']. [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            page (int): A page number within the paginated result set.. [optional]
            page_size (int): Number of results to return per page.. [optional]
            search (str): A search term. Avaliable search_fields: ('owner', 'assignee'). [optional]
            sort (str): Which field to use when ordering the results. Avaliable ordering_fields: ['owner', 'assignee', 'id', 'job_id', 'task_id', 'resolved']. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedIssueReadList
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.list(*args, **kwargs, _preload_content=False, _check_status=False)

    @overload
    def partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> IssueWrite:
        ...

    @overload
    def partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[IssueWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def partial_update(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[IssueWrite, int, typing.Dict[str, str]]:
        ...

    @overload
    def partial_update(
        self, id, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def partial_update(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def partial_update(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[IssueWrite, int, typing.Dict[str, str]], urllib3.HTTPResponse, IssueWrite
    ]:
        """Methods does a partial update of chosen fields in an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partial_update(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this issue.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_issue_write_request (PatchedIssueWriteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IssueWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.partial_update_endpoint.call_with_http_info(**kwargs)

    def partial_update_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as partial_update(), but returns the response unprocessed.
        Equivalent to calling partial_update with
        _preload_content = False and _check_status=False

        Methods does a partial update of chosen fields in an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partial_update(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this issue.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            patched_issue_write_request (PatchedIssueWriteRequest): [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IssueWrite
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.partial_update(*args, **kwargs, _preload_content=False, _check_status=False)

    @overload
    def retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[True] = True,
        _preload_content: typing.Literal[True] = True,
        **kwargs,
    ) -> IssueRead:
        ...

    @overload
    def retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> typing.Tuple[IssueRead, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve(
        self, id, _return_http_data_only: typing.Literal[False], **kwargs
    ) -> typing.Tuple[IssueRead, int, typing.Dict[str, str]]:
        ...

    @overload
    def retrieve(
        self, id, _preload_content: typing.Literal[False], **kwargs
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[True],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    @overload
    def retrieve(
        self,
        id,
        _return_http_data_only: typing.Literal[False],
        _preload_content: typing.Literal[False],
        **kwargs,
    ) -> urllib3.HTTPResponse:
        ...

    def retrieve(
        self, id, **kwargs
    ) -> typing.Union[
        typing.Tuple[IssueRead, int, typing.Dict[str, str]], urllib3.HTTPResponse, IssueRead
    ]:
        """Method returns details of an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this issue.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Checked before _return_http_data_only.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _check_status (bool): whether to check response status
                for being positive or not.
                Default is True
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IssueRead
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_check_status"] = kwargs.get("_check_status", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.retrieve_endpoint.call_with_http_info(**kwargs)

    def retrieve_raw(self, *args, **kwargs) -> urllib3.HTTPResponse:
        """
        The same as retrieve(), but returns the response unprocessed.
        Equivalent to calling retrieve with
        _preload_content = False and _check_status=False

        Method returns details of an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this issue.

        Keyword Args:
            x_organization (str): [optional]
            org (str): Organization unique slug. [optional]
            org_id (int): Organization identifier. [optional]
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IssueRead
                If the method is called asynchronously, returns the request
                thread.
        """
        return self.retrieve(*args, **kwargs, _preload_content=False, _check_status=False)
